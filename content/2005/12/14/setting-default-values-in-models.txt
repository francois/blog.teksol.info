--- 
title:      "Setting default values in models"
created_at: 2005-12-14 12:08:00
blog_post:  true
filter:
  - erb
  - textile
--- 
On the Rails mailing list, Larry White asked about "adding initialization to a model class":http://thread.gmane.org/gmane.comp.lang.ruby.rails/31522:

bq. How do add initialization to a model class that adds an attribute and sets its values?  I tried adding an initialize method but I get a runtime exception:NoMethodError in Sites#new.

This is an easy thing if you use callbacks:
<% code do -%>class Site < ActiveRecord::Base
  def after_initialize
    self.attribute = default_value unless self.attribute
  end
end
<% end -%>

It is important to check if the value has already been assigned, or else the default value will overwrite any values set in the <code class="method constructor">initialize</code> call:
<% code do -%>def test_does_not_overwrite_values_in_initialize_with_default_values
  s = Site.new(:attribute => another_value)
  assert_equal another_value, s.attribute,
    'overwrote the given value with the default value'
end
<% end -%>

The sequence of callbacks on initialization looks like this:
# initialize - before super()
# in block
# after_initialize
# initialize - after super()

"In block" is there because when calling <code class="method constructor">new</code> you can pass a block, and it will be called with the new instance:
<% code do -%>Model.new do |m|
  m.attribute = default_value
end
<% end -%>

When you find model instances on the other hand, here's the sequence of events:
# after_find
# after_initialize

You see, I am very surprised... I had not realized that <code class="method">after_initialize</code> was called when an instance was found in the <abbr title="database">DB</abbr>.  Well, that is interesting...
