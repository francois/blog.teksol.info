--- 
title:      "Building the SQL WHERE clause dynamically, revisited"
created_at: 2005-12-09 22:39:00
blog_post:  true
id:         24
filter:
  - erb
  - textile
--- 
In "Building the SQL WHERE clause dynamically in Rails":http://blog.teksol.info/articles/2005/10/31/building-the-sql-where-clause-dynamically-in-rails, I showed how to build the WHERE clause like this:
<% code do -%>class SearchController < ApplicationController
  def search
    conditions = ['1=1']

    conditions << 'cond1 = :cond1' if params[:cond1]
    conditions << 'cond2 = :cond2' if params[:cond2]

    @results = Model.find(:all,
        :conditions => [conditions.join(' AND '), params])
  end
end
<% end -%>

"Ezra Zygmuntowicz":http://brainspl.at/ of "brainsp.at":http://brainspl.at/ fame
created a <code class="ruby module">Cond</code> module to make that even easier:
<% code do -%>class SearchController < ApplicationController
  def search
    conditions = Cond::create do
      cond1 '=', params[:cond1]
      cond2 '=', params[:cond2]
    end

    @results = Model.find(:all,
        :conditions => conditions)
  end
end
<% end -%>

See "Build AR::Base.find's :conditions clause dynamically take one":http://brainspl.at/articles/2005/12/02/build-ar-base-finds-conditions-clause-dynamically-take-one for the full source code.

Now, if that were turned into a plugin, wouldn't that be nice ?
