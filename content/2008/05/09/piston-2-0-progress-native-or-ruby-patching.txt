--- 
title:      "Piston 2.0 Progress: native or ruby patching ?"
created_at: 2008-05-09 19:57:00
blog_post:  true
id:         5243
filter:
  - erb
  - textile
--- 
<code>piston update</code> is coming.  I have the high-level workflow completed.  Conceptually, updating is pretty simple:

<% code do -%>module Piston
  module Commands
    class Update < Piston::Commands::Base
      # +wcdir+ is the working copy we're going to change.
      # +to+ is the new target revision we want to be at after update returns.
      def run(wcdir, to)
        working_copy = Piston::WorkingCopy.guess(wcdir)

        logger.debug {"Recalling previously saved values"}
        values = working_copy.recall

        repository_class = values["repository_class"]
        repository_url = values["repository_url"]
        repository = repository_class.constantize.new(repository_url)
        from_revision = repository.at(values["handler"])
        to_revision = repository.at(to)

        logger.debug {"Validating that #{from_revision} exists and is capable of performing the update"}
        from_revision.validate!

        logger.info {"Updating from #{from_revision} to #{to_revision}"}
        working_copy.apply_differences(from_revision.differences_with(to_revision))
      end
    end
  end
end
<% end -%>

Obviously, the devil's in the details...  Notice the last line above:

<% code do -%>working_copy.apply_differences(from_revision.differences_with(to_revision))
<% end -%>

<code>from_revision</code> will calculate a set of differences between itself and <code>to_revision</code>.  In Subversion speak, that would probably mean an svn log followed by an svn diff, to get all changes (copies + diffs).

What Piston 1.x does is copy the newer file over the original file, and then applies the changes between the last changed revision of the local files and the working copy.  This ensures changes that were made are kept in the new revision.

I know I can do it under Subversion, as I have already done it, but what about git ?  I can probably use a combination of git-format-patch and git-apply to get the job done.  That would certainly work.

I also thought about finding / using a patch implementation in Ruby.  I wonder if that would be another acceptable road ?  Anybody out there has / knows about a patch implementation in Ruby ?
