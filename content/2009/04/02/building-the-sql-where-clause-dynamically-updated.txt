--- 
title:      "Building the SQL WHERE Clause Dynamically - Updated"
created_at: 2009-04-02 09:29:11
id:         20090402092911
tags: 
  - tips
ad_tags:
  - rails
blog_post:  true
filter:
  - erb
  - textile
--- 
Back in October 2005, I wrote an article entitled "Building the SQL WHERE Clause Dynamically":http://blog.teksol.info/2005/10/31/building-the-sql-where-clause-dynamically-in-rails.  This article is obsolete and I'm replacing it with this one instead.

What do you do with a FORM that has multiple conditions?  Something like this:

<form action="#" method="get">
  <p>
    <label for="region">Region:</label>
    <select id="region" name="region">
      <option>All</option>
      <option>North</option>
      <option>East</option>
      <option>West</option>
      <option>South</option>
    </select>
  </p>
  <p>
    <label for="salary">Salary:</label>
    <select id="salary" name="salary">
      <option>All</option>
      <option>0-10K</option>
      <option>10K-20K</option>
      <option>20K-50K</option>
      <option>50K+</option>
    </select>
  </p>
  <p>
    <label for="tags">Tags:</label>
    <input id="tags" name="tags"/>
  </p>
</form>

The way I would do it today is using named scopes:

<% code "app/models/person.rb" do %>class Person < ActiveRecord::Base
  is_taggable

  named_scope :in_region,
    lambda {|region| {:conditions => {:region => region}}}
  named_scope :with_salary,
    lambda {|lower, upper| {:conditions =>
      {:salary => (lower .. upper)}}}

  # Elided, but something similar to the above
  named_scope :tagged_with,
    lambda {|tags| {:conditions =>
      ...}}
end
<% end %>

Then you need your controller to translate between what the view provides and what the model expects:

<% code "app/controllers/searches_controller.rb" do %>class SearchesController < ApplicationController
  def show
    root = Person
    root = root.in_region(params[:region]) unless params[:region] =~ /all/i
    unless params[:salary] =~ /all/i
      params[:salary].gsub!("K", "000")
      lower, upper = params[:salary].split("-")
      root = root.with_salary(lower, upper)
    end
    root = root.tagged_with(Tag.parse(params[:tags])) unless params[:tags].blank?
    @people = root.paginate(:page => params[:page])
  end
end
<% end %>

For simpler forms, the approach above would be sufficient.  For more complex forms, I suggest you look at plugins that aim to provide more structure around your SQL clauses, such as:

* "Ambition":http://ambition.rubyforge.org/
* "criteria_query":http://agilewebdevelopment.com/plugins/criteria_query
* "ez_where":http://agilewebdevelopment.com/plugins/ez_where

I also suggest looking at "Searching and Queries Plugins - Agile Web Development":http://agilewebdevelopment.com/plugins/category/4 to find other plugins.
