--- 
title:      "Asymmetric associations"
created_at: 2006-02-15 00:40:00
blog_post:  true
tags: 
  - habtm
  - associations
id:         31
filter:
  - erb
  - textile
--- 
In Rails, there are no requirements that both sides of an association be symmetric.  In fact, I often find it useful to have asymmetric relationships.

For example, I'm building a mass-mailer.  I have parties (people), emails and recipients.  Emails are <acronym title="has_and_belongs_to_many">habtm</acronym> with regards to parties.  Since my join table contains other fields besides the two foreign keys, I need a real model for it.

Examine the following code:
<% code do -%>class Email < ActiveRecord::Base
  has_many :recipients
end

class Party < ActiveRecord::Base
  has_and_belongs_to_many :emails,
      :join_table => 'recipients'
end

class Recipient < ActiveRecord::Base
  belongs_to :email
  belongs_to :party

  def read!
    self.toggle!(:read)
  end
end
<% end -%>

The above models give rise to the following very natural code:
<% code do -%>>> fbos = Party.find_by_login('fbos')
=> #<Party:0x3c019d0 ...>
>> info = Email.create(:subject => 'Latest Schedule',
            :body => 'Group schedule: ...')
=> #<Email:0x3bece38 ...>
>> info.recipients.create(:party => fbos)
=> #<Recipient:0x3bccfd8 ...>
>> fbos.emails
=> [#<Email:0x3b80dc0 ...>]
<% end -%>

If access to read or unread E-Mail is needed, the habtm association can be declared more than once, with conditions that discriminate between the different states:
<% code do -%>class Party < ActiveRecord::Base
  has_and_belongs_to_many :unread_emails,
      :join_table => 'recipients',
      :conditions => 'read = 0'
  has_and_belongs_to_many :read_emails,
      :join_table => 'recipients',
      :conditions => 'read = 1'
end
<% end -%>

Please comment or send me an E-Mail at "francois.beausoleil@gmail.com":mailto:francois.beausoleil@gmail.com to tell me about your experiences with asymmetric relationships.