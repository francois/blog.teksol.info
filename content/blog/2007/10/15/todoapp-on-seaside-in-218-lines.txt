--- 
title:      "TodoApp on Seaside in 218 lines"
created_at: 2007-10-15 08:10:00
blog_post:  true
filter:
  - erb
  - textile
--- 
h2. The application's models

We'll need a <code class="class">Todo</code>, <code class="class">TodoUser</code> and <code class="class">TodoUserDatabase</code>.  Each user will keep a copy of it's todos, and the database will give us methods to find and register new users.  Let's start with the user's database:

<% code(:lang => "smalltalk") do -%>Object subclass: #TodoUserDatabase
	instanceVariableNames: 'database'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-Model'
<% end -%>

In case you never noticed, this is a message named <code class="method smalltalk">#subclass:instanceVariableNames:classVariableNames:poolDictionaries:category</code>, and the receiver is <code class="class">Object</code>.  Through the magic of code formatting, this looks like a class declaration, but it's just another "message":http://en.wikipedia.org/wiki/Smalltalk#Messages.

The database object needs a way to initialize itself.  We have two ways to do it: either at instance initialization time, or on first access time.  Let's go the latter way, which is what seems most prevalent in Smalltalk / Seaside code I've read:

<% code(:lang => "smalltalk") do -%>database
	^ database ifNil: [database := OrderedCollection new]
<% end -%>

Put this method in protocol *private*.  Then, we need a way to add and remove users:

<% code(:lang => "smalltalk") do -%>addUser: aUser
	(self findWithLogin: aUser login)
		ifNil: [self database add: aUser. ^ aUser]
		ifNotNil: [self raiseDuplicateLoginName]

removeUser: aUser
	database remove: aUser
<% end -%>

These go in protocol *accessing*.  Notice <code class="method">#addUser:</code> calls <code class="method">#raiseDuplicateLoginName</code>.  Let's define that immediately:

<% code(:lang => "smalltalk") do -%>rraiseDuplicateLoginName
	Error raiseSignal: 'Can''t have two users with the same login'
<% end -%>

Put this method in protocol *error handling*.  <code class="method">#addUser:</code> calls another helper method:  <code class="method">#findWithLogin:</code>.  The implementation looks like this:

<% code(:lang => "smalltalk") do -%>findWithLogin: aLogin
	^ self database detect: [:each | each login = aLogin] ifNone: [nil]
<% end -%>

Again, put this method in protocol *accessing*.  We're done with the database side of things.  We can now switch to the user itself.

h3. TodoUser model

<% code(:lang => "smalltalk") do -%>Object subclass: #TodoUser
	instanceVariableNames: 'login password todos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-Model'
<% end -%>

As the class comment, enter this text:

bq. Instances of myself represent a user with a login and password, as well as a collection of Todo instances.

In protocol *accessing*, we define basic accessor methods:

<% code(:lang => "smalltalk") do -%>login
	^ login

login: anObject
	login := anObject

isSamePassword: aPassword
	^ password = aPassword

password: anObject
	password := anObject

todos
	^ todos ifNil: [todos := OrderedCollection new]
<% end -%>

Again, note how the <var>todos</var> instance variable is initialized if it wasn't previously initialized.  Equivalent Ruby code uses the <code class="operator">||=</code> operator.

Then, we need to add and remove todos from the user:

<% code(:lang => "smalltalk") do -%>addTodo: aTodo
	self todos add: aTodo

removeTodo: aTodo
	self todos remove: aTodo
<% end -%>

Pretty simple, as things go.  Put these in the *accessing* protocol.  The final model is the Todo itself.

h3. Todo model

Let's declare the class:

<% code(:lang => "smalltalk") do -%>Object subclass: #Todo
	instanceVariableNames: 'createdAt completed description completedAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-Model'
<% end -%>

And the class' comment:

bq. Instances of myself represent a task that should be done, a todo.  Todos are pretty simple:  they have a description and a flag that identifies the completion status.  Todos also keep track of when they were instantiated and completed.

This time around, we need an <code class="method">#initialize</code> method:

<% code(:lang => "smalltalk") do -%>initialize
	createdAt := DateAndTime now
<% end -%>

Put this in the *initialization* protocol.  Next, in protocol *accessing*, we add a couple of basic accessors:

<% code(:lang => "smalltalk") do -%>createdAt
	^ createdAt

description
	^ description

description: aString
	description := aString

isCompleted
	^ completedAt notNil

completedAt
	^ completedAt

completedAt: aDateTime
	completedAt := aDateTime

markCompleted
	completedAt := DateAndTime now.
<% end -%>

h2. The Seaside UI:  controllers and views

To kick things off, I define a new Seaside <code class="class">WAComponent</code> subclass which will be our root component:

<% code(:lang => "smalltalk") do -%>WAComponent subclass: #TodoComponent
	instanceVariableNames: ''
	classVariableNames: 'UserDatabase'
	poolDictionaries: ''
	category: 'Todo-UI-Seaside'
<% end -%>

We define ourselves a class variable named <var>UserDatabase</var> which will hold an instance of <code class="class">TodoUserDatabase</code>.  Let's give ourselves two accessor methods to the database:  one class side and the other instance side.  Put this one in *accessing*, *class side*:

<% code(:lang => "smalltalk") do -%>userDatabase
	^ UserDatabase ifNil: [UserDatabase := TodoUserDatabase new]
<% end -%>

Again, we see the same pattern: initialize unless already initialized.  Back on the *instance side*, add this method  in the *accessing* protocol:

<% code(:lang => "smalltalk") do -%>userDatabase
	^ self class userDatabase
<% end -%>

This is a simple call to the class side version of the method with the same name.

h3. TodoAuthDecorator

To implement authentication, we must wrap the application within a decorator that will take care of these details for it.  The decorator's job is simple:  authenticate or register a new user, and when authenticated, show the application instead of the authentication / registration form.  I based this implementation on Seaside's <code class="class">WABasicAuthentication</code>, but mine uses a form instead of the "HTTP Basic Access Authentication":ftp://ftp.isi.edu/in-notes/rfc2617.txt method.  I could have subclassed <code class="class">WABasicAuthentication</code>, but I wanted to learn how to do it manually before I reused code.

Seaside's decorators have an owner, which is the decorated component.  The decorator has a chance to let the component render itself or not, which is what happens later in <code class="method">#renderContentOn:</code>.

Let's start by declaring the class:

<% code(:lang => "smalltalk") do -%>WADecoration subclass: #TodoAuthDecorator
	instanceVariableNames: 'login password passwordConfirmation authenticated authenticationMessage registrationMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-UI-Seaside'
<% end -%>

<var>login</var>, <var>password</var> and <var>passwordConfirmation</var> are used to hold the login and password during registration and authentication.  I use <var>authenticated</var> as a simple boolean to determine if authentication was successful or not.  <var>authenticationMessage</var> and <var>registrationMessage</var> are messages that will be shown to the user (think of Rail's "flash":http://api.rubyonrails.org/classes/ActionController/Flash.html).  I begin in the *initialization* protocol with:

<% code(:lang => "smalltalk") do -%>initialize
	authenticated := false
<% end -%>

All Seaside decorators that want a chance to render around their owner must provide a <code class="method">#renderContentOn:</code> method.  This goes in the *rendering* protocol:

<% code(:lang => "smalltalk") do -%>renderContentOn: html
	authenticated
		ifTrue: [self renderOwnerOn: html]
		ifFalse: [self renderAuthenticationFormOn: html]
<% end -%>

When authenticated, we render our owner (the decorated component), else we call <code class="method">#renderAuthenticationFormOn:</code>, which looks like this:

<% code(:lang => "smalltalk") do -%>renderAuthenticationFormOn: html
	html heading: 'Todo List'.
	(html div) id: 'auth'; with: [
		(html div) class: 'column returning'; with: [
			self renderReturningUserFormOn: html].
		(html div) class: 'column new'; with: [
			self renderNewUserFormOn: html]].
	html div class: 'clear'; with: [html space]
<% end -%>

Most of this is setting up nested <a href="http://www.w3.org/TR/html401/struct/global.html#edef-DIV"><code class="html element">DIV</code></a>s to create a two-column layout.  Styling is handled by the <code class="method">#style</code> method:

<% code(:lang => "smalltalk") do -%>style
	^ '
#auth-area a#logout { float: right}
#auth .column { width: 49%; float: left; }
#auth form label, #auth form input { display: block; }
.clear { clear: both; }
'
<% end -%>

p. <code class="method">#renderAuthenticationFormOn:</code> uses a couple of helper methods:

<% code(:lang => "smalltalk") do -%>renderNewUserFormOn: html
	html form: [
		html heading: 'I am a new user' level: 2.
		registrationMessage ifNotNilDo: [:msg|
			html heading: msg level: 3].
		html div: [
			(html label) for: 'new-login'; with: 'Login'.
			(html textInput) id: 'new-login'; on: #login of: self].
		html div: [
			(html label) for: 'new-password'; with: 'Password'.
			(html passwordInput) id: 'new-password'; on: #password of: self].
		html div: [
			(html label) for: 'new-password-confirmation'; with: 'Confirm password'.
			(html passwordInput) id: 'new-password-confirmation'; on: #passwordConfirmation of: self].
		(html submitButton) on: #register of: self]

renderReturningUserFormOn: html
	html heading: 'I am a returning user' level: 2.
	authenticationMessage ifNotNilDo: [:msg|
		html heading: msg level: 3].
	html form: [
		html div: [
			(html label) for: 'login'; with: 'Login'.
			(html textInput) id: 'login'; on: #login of: self].
		html div: [
			(html label) for: 'password'; with: 'Password'.
			(html passwordInput) id: 'password'; on: #password of: self].
		(html submitButton) on: #authenticate of: self]
<% end -%>

<code class="class">WATag</code>'s <code class="method">#on:of:</code> message is pretty powerful:  it sends the specified message to the specified object.  <code class="class">WATextInputTag</code> also sends a mutator message to the object when doing form submissions.  The returning user case calls <code class="method">#authenticate</code> on self, which is implemented as follows:

<% code(:lang => "smalltalk") do -%>authenticate
	| user |
	user := self userDatabase findWithLogin: login.
	user ifNil: [
			self failAuthentication: 'Unable to authenticate using these credentials.']
		ifNotNil: [
			(user isSamePassword: password)
				ifTrue: [
					authenticationMessage := nil.
					self owner user: user.
					authenticated := true]
				ifFalse: [
					self failAuthentication: 'Invalid credentials for user.']]
<% end -%>

This goes in the *actions* protocol.  When registering, we instead call <code class="method">#register</code>:

<% code(:lang => "smalltalk") do -%>register
	| user |
	user := self userDatabase findWithLogin: login.
	user
		ifNotNil: [
			self failRegistration: 'Login already taken']
		ifNil: [
			password = passwordConfirmation
				ifTrue: [
					authenticationMessage := nil.
					user := TodoUser new.
					user login: login; password: password.
					self userDatabase addUser: user.
					self authenticate]
				ifFalse: [
					self failRegistration: 'Password and confirmation do not match']]
<% end -%>

If the user doesn't already exist (as identified through the login), and the password and the confirmation match, we register the new user and immediately authenticate him.  Once the user is authenticated, we finally let the decorated component (the decorator's owner) render itself:

<% code(:lang => "smalltalk") do -%>renderOwnerOn: html
	(html div) id: 'auth-area'; with: [
		(html anchor) id: 'logout'; on: #logout of: self.
		html heading: login capitalized, '''s Todo List'].
	super renderOwnerOn: html
<% end -%>

Put this in the *rendering* protocol.  Here, we provide a logout link for authenticated users, as well as show who's list this is.  Then, we call our superclass' <code class="method">#renderOwnerOn:</code> to let the decorated component render itself.  The logout link callsback the <code class="method">#logout</code> method (in the *actions* protocol):

<% code(:lang => "smalltalk") do -%>logout
	self owner user: nil.
	self clearAuthenticationInfo
<% end -%>

Above, we called a couple of convenience methods, which obviously go in the *convenience* protocol:

<% code(:lang => "smalltalk") do -%>clearAuthenticationInfo
	login := nil.
	password := nil.
	passwordConfirmation := nil.
	authenticated := false

failAuthentication: aMessage
	authenticationMessage := aMessage.
	password := nil.
	passwordConfirmation := nil.

failRegistration: aMessage
	registrationMessage := aMessage.
	password := nil.
	passwordConfirmation := nil.
<% end -%>

Lastly, a couple of accessor methods:

<% code(:lang => "smalltalk") do -%>login
	^ login

login: aLogin
	login := aLogin

password
	^ password

password: aPassword
	password := aPassword

passwordConfirmation
	^ passwordConfirmation

passwordConfirmation: aPassword
	passwordConfirmation := aPassword

userDatabase
	^ TodoComponent userDatabase
<% end -%>

h3. TodoApp: our first real component

TodoApp is our root application component.  It should thus register itself as a Seaside root.  Let's begin by declaring the class:

<% code(:lang => "smalltalk") do -%>TodoComponent subclass: #TodoApp
	instanceVariableNames: 'viewers user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-UI-Seaside'
<% end -%>

Then, *class side*, in protocol *testing*, we implement <code class="method">#canBeRoot</code>:

<% code(:lang => "smalltalk") do -%>canBeRoot
	^ true
<% end -%>

Still *class side*, in protocol *initialization*, add:

<% code(:lang => "smalltalk") do -%>initialize
	super initialize.
	self registerAsApplication: #todo
<% end -%>

This registers <code class="class">TodoApp</code> as an application in Seaside, under <code class="uri">/seaside/todo</code>.  Back on the *instance side*, in protocol *initialization*, we implement:

<% code(:lang => "smalltalk") do -%>initialize
	viewers := OrderedCollection new.
	self addDecoration: (TodoAuthDecorator new).
	self registerForBacktracking.
<% end -%>

The root component knows that it needs authentication, so it immediately adds a decoration to itself.  Seaside requires a component to register itself for backtracking if it's collection of children will change during it's lifecycle.  Since the user will add and remove todos, our collection of <code class="class">TodoViewer</code> instances will change.

Components render themselves, so put this in protocol *rendering*:

<% code(:lang => "smalltalk") do -%>renderContentOn: html
	html orderedList: [
		self children do: [:each |
			html listItem: [html render: each]]].
	html paragraph: [
		(html anchor) on: #newTodo of: self]
<% end -%>

We render our collection of children, which is the <var>viewers</var> instance variable.  Again, we have a callback when creating a new todo.  In protocol *call/answer*, we add:

<% code(:lang => "smalltalk") do -%>newTodo
	| editor |
	editor := TodoEditor new
				todo: (Todo new);
				yourself.
	(self call: editor) ifNotNilDo: [:todo | self addTodo: todo]
<% end -%>

Again, we have a couple of accessors which are pretty simple:

<% code(:lang => "smalltalk") do -%>addTodo: aTodo
	user addTodo: aTodo.
	viewers add: (TodoViewer new todo: aTodo)

children
	^ viewers

user
	^ user

user: aUser
	user := aUser.
	viewers := OrderedCollection new.
	user
		ifNotNil: [
			user todos do: [:each |
				viewers add: (TodoViewer new todo: each)]]
<% end -%>

p. <code class="method">#addTodo:</code> adds the todo to the user instance, and also registers a new <code class="class">TodoViewer</code> instance.  <code class="method">#user:</code> takes care of cleanup in case of logout (aUser isNil), and registers new <code class="class">TodoViewer</code> instances when logging in (aUser notNil).

h3. TodoViewer: A simple model viewer

This class is pretty simple.  It's job is to display a todo and allow it to be marked completed.  Let's declare the class:

<% code(:lang => "smalltalk") do -%>TodoComponent subclass: #TodoViewer
	instanceVariableNames: 'todo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-UI-Seaside'
<% end -%>

We begin by rendering the component:

<% code(:lang => "smalltalk") do -%>renderContentOn: html
	(html paragraph)
		class: (todo isCompleted ifTrue: ['complete']);
		with: [
			self renderDescriptionOn: html.
			self renderCompletionStatusOn: html]
<% end -%>

The call to <code class="method">#class:</code> sets up an HTML class on the paragraph element, to help styling.  A couple more rendering methods:

<% code(:lang => "smalltalk") do -%>renderDescriptionOn: html
	html html: todo description.
	html space.

renderCompletionStatusOn: html
	todo isCompleted
		ifFalse: [
			(html anchor) callback: [todo markCompleted]; with: 'It''s done!']
		ifTrue: [
			html span: todo completedAt displayString]

style
	^'
.complete { color: #999; }
.complete span { font-size: smaller; }
}'
<% end -%>

And the usual accessors:

<% code(:lang => "smalltalk") do -%>todo
	^ todo

todo: anObject
	todo := anObject
<% end -%>

h3. TodoEditor: Create or edit a Todo instance

The current version of the todo app doesn't use <code class="class">TodoEditor</code> to edit existing todos, but it does use it for creating new instances.  As usual, let's declare the class:

<% code(:lang => "smalltalk") do -%>TodoComponent subclass: #TodoEditor
	instanceVariableNames: 'todo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Todo-UI-Seaside'
<% end -%>

Next, we render the component:

<% code(:lang => "smalltalk") do -%>renderContentOn: html
	html form: [
		html div: [
			(html label) for: 'description'; with: 'Description'.
			(html textInput) id: 'description'; on: #description of: todo].
		(html submitButton) on: #save of: self.
		html space.
		(html anchor) on: #cancel of: self]
<% end -%>

Here is where things get interesting: <code class="method">#on:of:</code> is used to set a callback on the todo instance.  Seaside will call <code class="method">#description:</code> of the todo instance to set the value on form post.  We don't need a temporary variable to hold the description in the component: the todo instance takes care of that.

In protocol *call/answer*, we add the following methods, which are called from <code class="method">#renderContentOn:</code>

<% code(:lang => "smalltalk") do -%>save
	self answer: todo

cancel
	self answer: nil
<% end -%>

And the final accessors:

<% code(:lang => "smalltalk") do -%>todo
	^ todo

todo: aTodo 
	todo := aTodo
<% end -%>

Total line count:  233 lines, thanks to:

<% code(:lang => "smalltalk") do -%>(Smalltalk allClasses
    select:[:each | each category beginsWith: 'Todo-'])
    inject: 0 into: [:sum :each | sum + each linesOfCode]
<% end -%>

Print this to get the total.

*UPDATE 2007-10-15*:  I counted the lines initially by doing a fileOut and using standard command line tools:  cat and wc.  Seems I was slightly off.

h2. Todos (pun intended)

There are a couple of things I'd like this todo app to be able to do:

* Use an inline editor to change the description;
* Use Scriptaculous to add a couple of effects;
* Use Ajax to mark completed items;
* Format dates and times;
* Maybe set the user's timezone and show dates and times using the user's timezone;
* Date/time formats per-user;
* Enhance security by not storing plain-text versions of passwords in user instances.

This is a toy project.  I might never again touch this application.

h2. Recap

One point I'd like to be clear on:

p{text-align: center}. <strong style="font-size: 20pt">Don't do that!</strong>

I store an unencrypted copy of the password in <code class="class">TodoUser</code> instances.  That should never be done.  As many others before me, I tried to simplify the code as much as possible.  There probably lurks a <code class="class">Password</code> model object in there.

Also, I am no expert on Smalltalk, Squeak or Seaside.  There are probably a couple of things I could have done differently, and I hope some people out there might be interested in helping me learn more about Seaside.

I hope you enjoyed this article.  There might be more of these coming later.  Send me E-Mail at "francois@teksol.info":mailto:francois@teksol.info or write a comment.
