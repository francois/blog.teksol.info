--- 
title:      "New Piston implementation started"
created_at: 2008-03-13 04:34:00
blog_post:  true
filter:
  - erb
  - textile
--- 
Well, it is started.  If you want to follow Piston 2.0's progress, head on over to the "Piston GitHub Repository":http://github.com/francois/piston/tree/master.

If you want, you can register to <a href="http://github.com/feeds/francois/commits/piston/master" type="application/atom+xml"><img src="/images/mephisto/icons/feed-icon-12x12.gif"/> Piston's Recent Commits on master</a>.

What have I got so far ?

<textarea name="code" cols="55" rows="15" class="ruby" title="piston/commands/import.rb">require "piston/commands/base"

module Piston
  module Commands
    class Import < Piston::Commands::Base
      attr_reader :options

      def initialize(options={})
        @options = options
        logger.debug {"Import with options: #{options.inspect}"}
      end

      def run(revision, working_copy)
        tmpdir = working_copy.path.parent + ".#{working_copy.path.basename}.tmp"

        begin
          debug {"Creating temporary directory: #{tmpdir}"}
          tmpdir.mkdir
          revision.checkout_to(tmpdir)
          working_copy.create
          working_copy.copy_from(tmpdir)
          working_copy.remember(revision.remember_values)
          working_copy.finalize
        ensure
          debug {"Removing temporary directory: #{tmpdir}"}
          tmpdir.rmtree
        end
      end
    end
  end
end
</textarea>

This is the new import command.  Everything is expressed in terms of high-level operations, and the different backends will take care of doing the right thing.  In the case of Subversion, checking out the repository will involve running "svn checkout".  For Git, this will be "git clone", and so on.

#remember in the context above is for storing the properties Piston requires.  These are the old piston:root, piston:uuid Subversion properties.  The different working copy backends will take care of storing this in a format that is suitable:  Subversion properties when available, YAML file otherwise.

Also, Piston will be more like Merb:  it will be split in multiple Gems.  Piston, the main gem, will install piston-core as well as all backends.  piston-svn and piston-git are the first two backends I am planning on adding.

I'm having fun reimplementing Piston like this !  No fun == no new features.  Fun == many new features.
