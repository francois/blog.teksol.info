--- 
title:      "Useful #with_scope technique"
created_at: 2007-03-28 17:40:03
blog_post:  true
tags: 
  - scope
  - activerecord
id:         89
filter:
  - erb
  - textile
--- 
I just stumbled upon something very interesting.  In my application, we accept anonymous testimonials from the web, but they must not be shown until they have been reviewed and approved by an administrator.

The first API I designed was this:

<% code("test/unit/testimonial_test.rb") do -%>def test_can_get_approved_only
  testimonials = Testimonial.find(:completed)
  assert_equal [@approved_testimonial], testimonials
end
<% end -%>

That worked well enough, even after I started adding code to take care of :all and :first, and modifying <code class="ruby method">#count</code> to also use the same scoping rules.

But then, I hit a snag with scoped <code class="ruby method">#has_many</code> accesses.  The following failed:

<% code("test/unit/testimonial_test.rb") do -%>def test_can_count_approved_testimonials_for_a_single_contact
  testimonials = @contact.testimonials.count(:completed)
  assert_equal 1, testimonials
end
<% end -%>

This generated an invalid statement:

<% code(:lang => "shell") do -%>test_can_count_approved_testimonials_for_a_single_contact(TestimonialTest::AbilityToCountTest):
ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'approved' in 'where clause': SELECT count(*) AS count_all FROM testimonials WHERE (testimonials.contact_id = 1 AND (approved))
<% end -%>

I did a bit of debugging and found that <code class="ruby method">#has_many</code> had already modified the <code class="ruby method">#count</code> parameters even before my <code class="ruby method">#count_with_extensions</code> method was called.  So I decided to change my API.  I decided I wanted something like this:

<% code("test/unit/testimonial_test.rb") do -%>def test_can_get_approved_only
  testimonials = Testimonial.completed.find
  assert_equal [@approved_testimonial], testimonials
end
<% end -%>

This new API first defines the scope, then calls a normal ActiveRecord::Base method.  My first implementation was:

<% code("app/models/testimonial.rb") do -%>def self.completed
  with_scope(:find => {:conditions => ["approved_at IS NOT NULL"]}) do
    yield self
  end
end
<% end -%>

When I ran my tests, my error was immediately apparent:

<% code(:lang => "shell") do -%>test_can_get_approved_only(TestimonialTest::AbilityToCountTest):
LocalJumpError: no block given
<% end -%>

Ooops...  So I thought a bit more.  What I wanted to return from <code class="ruby method">#completed</code> was an object that could stand in for my class (Testimonial in this case), but for which the scope had been defined.  I ended up with this implementation:

<% code("app/models/testimonial.rb") do -%>def completed
  returning Object.new do |proxy|
    class << proxy
      def method_missing(method, *args)
        Testimonial.with_scope(:find => {:conditions => ["approved_at IS NOT NULL"]},
            :create => {:approved_at => Time.now}) do
          Testimonial.send(method, *args)
        end
      end
    end
  end
end
<% end -%>

What this implementation does is:

# It starts by creating a proxy object;
# It redefines <code class="ruby method">#method_missing</code> on that object;
# The new <code class="ruby method">#method_missing</code> method creates the scope we originally wanted and calls the method we were originally targetting;
# Then the proxy object is returned.

With that implementation, I get something nice:

<% code(:lang => "shell") do -%>$ rake test:recent
(in /home/francois/src)
/usr/local/bin/ruby -Ilib:test "/usr/local/lib/ruby/gems/1.8/gems/rake-0.7.2/lib/rake/rake_test_loader.rb" "test/unit/testimonial_test.rb"
Started
...............
Finished in 3.041738 seconds.

15 tests, 31 assertions, 0 failures, 0 errors
<% end -%>
